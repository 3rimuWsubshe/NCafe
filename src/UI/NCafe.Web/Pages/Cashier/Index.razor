@page "/cashier"
@using NCafe.Web.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Cashier - NCafe</PageTitle>

<h2>New Order</h2>

@if (products == null)
{
    <Spin />
}
else if (!products.Any())
{
    <Result Title="You need products in order to place an order.">
        <Extra>
            <Button Type="@ButtonType.Primary" OnClick="GoAdmin">Go Admin</Button>
        </Extra>
    </Result>
}
else
{
    if (cashierState == CashierState.Idle)
    {
        <Button Type="@ButtonType.Primary" OnClick="CreateOrder">Create Order</Button>
    }
    else if (cashierState == CashierState.OrderCreated)
    {
        <Form Loading="isLoading"
              Model="@orderItem"
              OnFinish="AddOrderItem"
              LabelColSpan="8"
              WrapperColSpan="16">
            <FormItem Label="Product">
                <AutoComplete @ref="productAutoComplete"
                              TOption="Product"
                              @bind-Value="@value"
                              OnSelectionChange="OnSelectionChange"
                              Options="products"
                              Placeholder="Product..." />
            </FormItem>
            <FormItem Label="Quantity">
                <AntDesign.InputNumber @bind-Value="@context.Quantity" />
            </FormItem>
            <FormItem WrapperColOffset="8" WrapperColSpan="16">
                <Button Type="@ButtonType.Primary" HtmlType="submit">
                    Add Item
                </Button>
            </FormItem>
        </Form>

        <Card>
            <Input Placeholder="Customer Name" @bind-Value="@customer" />
            <Button Type="@ButtonType.Primary" HtmlType="submit" OnClick="PlaceOrder">
                Place Order
            </Button>
        </Card>
    }
}

@code {
    private bool isLoading;

    private CashierState cashierState = CashierState.Idle;

    private Product[] products;

    private AutoComplete<Product> productAutoComplete;
    private string value;

    private Guid orderId;
    private string customer = string.Empty;
    private OrderItem orderItem = new OrderItem { Quantity = 1 };

    private string baseAddress;

    protected override async Task OnInitializedAsync()
    {
        baseAddress = Configuration["CashierBaseAddress"];

        products = await Http.GetFromJsonAsync<Product[]>($"{baseAddress}/products");
    }

    void OnSelectionChange(AutoCompleteOption item)
    {
        if (item.Value is Product product)
        {
            orderItem.ProductId = product.Id;
        }
    }

    async Task CreateOrder()
    {
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync($"{baseAddress}/orders", new { CreatedBy = "cashier-1" });
            response.EnsureSuccessStatusCode();

            orderId = await response.Content.ReadFromJsonAsync<Guid>();

            cashierState = CashierState.OrderCreated;
        }
        catch (Exception ex)
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to save the product: {ex.Message}.",
                    NotificationType = NotificationType.Error
                });
        }
        finally
        {
            isLoading = false;
        }
    }

    async Task AddOrderItem()
    {
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync($"{baseAddress}/orders/add-item", new { OrderId = orderId, orderItem.ProductId, orderItem.Quantity });
            response.EnsureSuccessStatusCode();

            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Item Added",
                    Description = $"{orderItem.Quantity}x {productAutoComplete.SelectedValue} was added.",
                    NotificationType = NotificationType.Success
                });

            orderItem.Quantity = 1;

            // The next 2 lines will reset the product selection
            value = "";
            productAutoComplete.SelectedValue = null;
        }
        catch (Exception ex)
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to add item: {ex.Message}.",
                    NotificationType = NotificationType.Error
                });
        }
        finally
        {
            isLoading = false;
        }
    }

    async Task PlaceOrder()
    {
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync($"{baseAddress}/orders/place", new { OrderId = orderId, Customer = new { Name = customer } });
            response.EnsureSuccessStatusCode();

            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Order Created",
                    Description = $"Order created successfully.",
                    NotificationType = NotificationType.Success
                });

            orderId = Guid.Empty;
            customer = string.Empty;
            cashierState = CashierState.Idle;

            // The next 2 lines will reset the product selection
            value = "";
            productAutoComplete.SelectedValue = null;
        }
        catch (Exception ex)
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to place order: {ex.Message}.",
                    NotificationType = NotificationType.Error
                });
        }
        finally
        {
            isLoading = false;
        }
    }

    void GoAdmin()
    {
        NavigationManager.NavigateTo("admin");
    }

    public enum CashierState
    {
        Idle,
        OrderCreated
    }
}
