@page "/cashier"
@using NCafe.Web.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Cashier - NCafe</PageTitle>

<h2>New Order</h2>

@if (products == null)
{
    <Spin />
}
else if (!products.Any())
{
    <Result Title="You need products in order to place an order.">
        <Extra>
            <Button Type="@ButtonType.Primary" OnClick="GoAdmin">Go Admin</Button>
        </Extra>
    </Result>
}
else
{
    <Form Loading="isLoading"
        Model="@order"
        OnFinish="PlaceOrder"
        LabelColSpan="8"
        WrapperColSpan="16">
        <FormItem Label="Product">
            <AutoComplete @ref="productAutoComplete"
                TOption="Product"
                @bind-Value="@value"
                OnSelectionChange="OnSelectionChange"
                Options="products"
                Placeholder="Product..." />
        </FormItem>
        <FormItem Label="Quantity">
            <AntDesign.InputNumber @bind-Value="@context.Quantity" />
        </FormItem>
        <FormItem WrapperColOffset="8" WrapperColSpan="16">
            <Button Type="@ButtonType.Primary" HtmlType="submit">
                Place Order
            </Button>
        </FormItem>
    </Form>
}

@code {
    private bool isLoading;

    private Product[] products;

    private AutoComplete<Product> productAutoComplete;
    private string value;
    private Order order = new Order { Quantity = 1 };

    private string baseAddress;

    protected override async Task OnInitializedAsync()
    {
        baseAddress = Configuration["CashierBaseAddress"];

        products = await Http.GetFromJsonAsync<Product[]>($"{baseAddress}/products");
    }

    void OnSelectionChange(AutoCompleteOption item)
    {
        if (item.Value is Product product)
        {
            order.ProductId = product.Id;
        }
    }

    async Task PlaceOrder()
    {
        isLoading = true;

        try
        {
            var response = await Http.PostAsJsonAsync($"{baseAddress}/orders", order);
            response.EnsureSuccessStatusCode();

            var _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Order Created",
                    Description = $"Order created successfuly.",
                    NotificationType = NotificationType.Success
                });
            
            order.Quantity = 1;

            // The next 2 lines will reset the product selection
            value = "";
            productAutoComplete.SelectedValue = null;
        }
        catch (Exception ex)
        {
            var _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to save the product.",
                    NotificationType = NotificationType.Error
                });
        }
        finally
        {
            isLoading = false;
        }
    }

    void GoAdmin()
    {
        NavigationManager.NavigateTo("admin");
    }
}
