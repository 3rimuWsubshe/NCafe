@page "/cashier"
@using NCafe.Web.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService

<PageTitle>Cashier - NCafe</PageTitle>

@if (_products == null)
{
    <Spin />
    return;
}

@if (!_products.Any())
{
    <Result Title="You need products in order to place an order.">
        <Extra>
            <Button Type="@ButtonType.Primary" OnClick="GoAdmin">Go Admin</Button>
        </Extra>
    </Result>
    return;
}
<div class="grid grid-cols-[1fr,2fr] h-full">
    <div class="grid grid-rows-[3rem,auto,3rem,5rem]">
        <h2 class="font-bold text-xl">Order Summary</h2>
        <ul>
            @foreach (var item in _order.Items)
            {
                <li class="grid grid-cols-2 p-2 border-b-dashed border-b border-dashed last:border-b-0 text-lg">
                    <span>@item.Quantity x @(_products.FirstOrDefault(p => p.Id == item.ProductId)?.Name)</span>
                    <span class="text-right">@(item.Total.ToString("C"))</span>
                </li>
            }
        </ul>
        @if (_order.Items.Any()) {
            <div class="grid grid-cols-2 p-2 text-right font-bold text-xl">
                <span>Total</span>
                <span>@(_order.Total.ToString("C"))</span>
            </div>

            <button class="m-2 shadow border-black border-1 rounded bg-sky-800 text-white text-xl font-bold active:bg-sky-600"
                    type="@ButtonType.Primary" @onclick="ShowModal">Place Order</button>
        }
    </div>
    <div class="grid grid-cols-4 grid-rows-4 gap-2 p-4">
        @foreach (var product in _products)
        {
            <button type="button" @onclick="() => AddItemToOrder(product.Id)"
                    class="shadow hover:shadow-lg p-2 text-xl border-solid border-black border-1 active:bg-sky-600 hover:bg-sky-800 hover:text-white hover:border-slate-500 rounded">
                <strong>@product.Name<br/>@product.Price.ToString("C")</strong>
            </button>
        }
    </div>


</div>

<NCafe.Web.Shared.Modal IsVisible="@_isModalVisible" OnClose="HideModal" OnCancel="CancelOrder" Title="Confirm order" OnConfirm="PlaceOrder">
    <label for="customer-name" class="block text">Customer name</label>
    <input autofocus type="text" @bind="_order.CustomerName" class="mt-1 block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"/>

    <div class="grid grid-cols-2 p-2 text-right font-bold text-xl">
        <span>Total</span>
        <span>@(_order.Total.ToString("C"))</span>
    </div>
</NCafe.Web.Shared.Modal>

@code {

    private Product[] _products;
    private readonly Order _order = new();
    private string _baseAddress;
    private bool _isModalVisible;

    protected override async Task OnInitializedAsync()
    {
        _baseAddress = Configuration["CashierBaseAddress"];

        _products = await Http.GetFromJsonAsync<Product[]>($"{_baseAddress}/products");
    }

    void ShowModal() => _isModalVisible = true;
    void HideModal() => _isModalVisible = false;

    void CancelOrder()
    {
        _order.Clear();
        _isModalVisible = false;
    }

    async Task AddItemToOrder(Guid productId)
    {
        if (_order.Id == Guid.Empty)
        {
            await CreateOrder();
        }

        var product = _products.FirstOrDefault(p => p.Id == productId);
        var item = _order.Items.FirstOrDefault(i => i.ProductId == productId);
        if (item == null)
        {
            item = new OrderItem { ProductId = productId, Price = product?.Price ?? 0, Quantity = 1 };
            _order.Items.Add(item);
        } else
        {
            item.Quantity++;
        }

        try
        {
            var response = await Http.PostAsJsonAsync(
                $"{_baseAddress}/orders/add-item",
                new { OrderId = _order.Id, item.ProductId, Quantity = 1 });
            response.EnsureSuccessStatusCode();
        }
        catch (Exception ex)
        {
            _ = NotificationService.Open(new NotificationConfig
            {
                Message = "Error",
                Duration = 0,
                Description = $"There was an error while attempting to add item: {ex.Message}.",
                NotificationType = NotificationType.Error
            });
        }
    }

    async Task CreateOrder()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(
                $"{_baseAddress}/orders", new { CreatedBy = "cashier-1" });
            response.EnsureSuccessStatusCode();

            _order.Id = await response.Content.ReadFromJsonAsync<Guid>();
        }
        catch (Exception ex)
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to create the order: {ex.Message}.",
                    NotificationType = NotificationType.Error
                });
        }
    }

    async Task PlaceOrder()
    {
        try
        {
            var response = await Http.PostAsJsonAsync(
                $"{_baseAddress}/orders/place",
                new { OrderId = _order.Id, Customer = new { Name = _order.CustomerName } });
            response.EnsureSuccessStatusCode();

            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Order Created",
                    Description = "Order created successfully.",
                    NotificationType = NotificationType.Success
                });

            _order.Clear();
            _isModalVisible = false;

        }
        catch (Exception ex)
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to place order: {ex.Message}.",
                    NotificationType = NotificationType.Error
                });
        }
    }

    void GoAdmin() => NavigationManager.NavigateTo("admin");
}
