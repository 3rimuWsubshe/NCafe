@page "/barista"
@using Microsoft.AspNetCore.SignalR.Client
@using NCafe.Web.Models
@inject HttpClient Http
@inject IConfiguration Configuration
@inject NavigationManager NavigationManager
@inject NotificationService NotificationService
@implements IAsyncDisposable

<PageTitle>Barista - NCafe</PageTitle>

<h2>Barista</h2>

@if (orders == null)
{
    <Spin />
}
else if (!orders.Any(o => !o.IsCompleted))
{
    <Result Title="No new orders for now." />
}
else
{
    <Card Title="New Orders">
    @foreach (var order in orders.Where(o => !o.IsCompleted))
    {
        <CardGrid Style="width:25%;text-align:center">
            <div>@order.ProductId</div>

            <Button Type="@ButtonType.Primary"
                Icon="@IconType.Outline.Check"
                Size="@ButtonSize.Large"
                OnClick="() => CompleteOrder(order.Id)">Complete</Button>
        </CardGrid>
    }
    </Card>
}

@code {
    private HubConnection hubConnection;
    private List<BaristaOrder> orders;

    protected override async Task OnInitializedAsync()
    {
        var url = $"{Configuration["BaristaBaseAddress"]}/orders";
        orders = await Http.GetFromJsonAsync<List<BaristaOrder>>(url);

        await StartHubAsync();
    }

    async Task CompleteOrder(Guid orderId)
    {
        var url = $"{Configuration["BaristaBaseAddress"]}/orders/{orderId}/prepared";
        try
        {
            var response = await Http.PostAsync(url, null);
            response.EnsureSuccessStatusCode();

            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Order Completed",
                    Description = $"Order completed successfuly.",
                    NotificationType = NotificationType.Success
                });

            var order = orders.FirstOrDefault(o => o.Id == orderId);
            orders.Remove(order);

            StateHasChanged();
        }
        catch
        {
            _ = NotificationService.Open(new NotificationConfig
                {
                    Message = "Error",
                    Duration = 0,
                    Description = $"There was an error while attempting to complete the order.",
                    NotificationType = NotificationType.Error
                });
        }
    }

    private async Task StartHubAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl($"{Configuration["BaristaBaseAddress"]}/orderHub")
            .Build();

        hubConnection.On<NCafe.Core.Hubs.Order>("ReceiveOrder", order =>
        {
            orders?.Add(new BaristaOrder { Id = order.Id, ProductId = order.ProductId, Quantity = order.Quantity });
            StateHasChanged();
        });

        await hubConnection.StartAsync();
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}
