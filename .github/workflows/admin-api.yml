name: Admin API

on:
  push:
    branches: [ "main" ]
    paths:
      - 'src/Admin/**'
  workflow_dispatch:

env:
  PROJECT_NAME: NCafe.Admin.Api
  REGISTRY: ghcr.io
  IMAGE_NAME: fredimachado/ncafe-admin-api
      
defaults:
  run:
    working-directory: src/Admin/NCafe.Admin.Api

jobs:
  build:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write

    steps:

    - uses: actions/checkout@v3

    - name: Setup .NET
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 7.0.x

    - name: Restore dependencies
      run: dotnet restore

    - name: Test
      run: dotnet test --results-directory ./testresults --logger "trx;LogFileName=test_results.xml" /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./testresults/coverage/ ../**.Tests/**.csproj

    - name: Build
      run: dotnet build -c Release --no-restore /p:CopyLocalLockFileAssemblies=true

    - name: Publish
      run: dotnet publish -c Release --no-restore --no-build -o ./output

    - name: Log in to the Container registry
      uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata (tags, labels) for Docker
      id: meta
      uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

    - name: Build and push Docker image
      uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
      with:
        context: src/Admin/NCafe.Admin.Api
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}

    - name: Generate release artifacts
      run: |
        chmod +x $GITHUB_WORKSPACE/scripts/generate-artifacts
        $GITHUB_WORKSPACE/scripts/generate-artifacts -a appspec.yaml -i ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }} -t ${{ steps.meta.outputs.version }} -r $GITHUB_WORKSPACE/helm

    - name: Archive release artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-artifacts
        path: src/Admin/NCafe.Admin.Api/deploy/
  
  release:
    runs-on: self-hosted
    needs: build

    env:
      ENVIRONMENT: dev

    steps:

    - uses: actions/checkout@v3

    - name: Download release artifacts
      uses: actions/download-artifact@v3
      with:
        name: release-artifacts
        path: src/Admin/NCafe.Admin.Api/deploy/

    - uses: jkroepke/setup-helmfile@v1
      with:
        version: '0.156.0'

    - name: Deploy to Kubernetes
      run: |
        helmfile init --force
        sed -i "s/[$]namespace[$]/${{ env.ENVIRONMENT }}/g" deploy/helmfile.yaml
        echo -e "\e[92mConfiguring kubernetes access in pipeline...\e[0m"
        mkdir .kube
        echo ${{ secrets.KUBE_CONFIG }} | base64 -d > .kube/config
        export KUBECONFIG=.kube/config
        echo -e "\e[92mDeploying to ${{ env.ENVIRONMENT }} environment...\e[0m"
        cd deploy
        helmfile --color -e ${{ env.ENVIRONMENT }} apply --set image.imagePullPolicy=Always
